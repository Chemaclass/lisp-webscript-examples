(ns app\server
  (:require phel\http)
  (:require phel\html :refer [html doctype])
  (:require app\qlkit\core :as ql)
  (:require app\parsers-db :as parsers-db)
  (:require app\little-clojure\core :as clj
            :refer [eprint writefile deref reset!]))

 # ./vendor/bin/phel repl
 # (load "./phel-backend/server.phel")
 # php -S localhost:8000

 (defn endpoint [_]
   (let [body (php/file_get_contents "php://input")
         query (clj/read-edn body)
         result (clj/write-edn (ql/parse-query query))]
     {:status  200
      :body result}))

 (defn home-html [cljs-code]
   (html
     (doctype :html5)
     [:html
      [:head
       [:meta {:charset "UTF-8"}]
       [:meta {:name "viewport" :content "width=device-width, initial-scale=1"}]
       [:link {:rel "shortcut icon" :href "data:,"}]
       [:link {:rel "apple-touch-icon" :href "data:,"}]
       [:script {:crossorigin nil :src "https://unpkg.com/react@17/umd/react.production.min.js"}]
       [:script {:crossorigin nil :src "https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"}]
       [:script {:crossorigin nil :src "https://cdnjs.cloudflare.com/ajax/libs/create-react-class/15.7.0/create-react-class.min.js"}]
       [:script {:src "https://kloimhardt.github.io/scittle-fork/js/scittle.js" :type "application/javascript"}]
       [:script {:src "https://kloimhardt.github.io/scittle-fork/js/scittle.ajax.js" :type "application/javascript"}]
       [:script {:src "https://kloimhardt.github.io/scittle-fork/js/scittle.qlkit.js" :type "application/javascript"}]
       [:title "Qlkit-todo"]]
      [:body
       [:div {:id "app"}]
       [:script {:type "application/x-scittle"
                 :src "./cljs/todo.cljs"}]]]))

 (defn home-render [_]
   {:status 200
    :body (home-html nil)})

 (defstruct route [method url query page])

 (def routes
   [(route "GET" "/todo_mvc.php" "" home-render)
    (route "GET" "/" "" home-render)
    (route "POST" "/todo_mvc.php" "endpoint" endpoint)
    (route "POST" "/endpoint" "" endpoint)])

 (defn route-match [request routes]
   (let
       [query (get (get request :uri) :query)
        altquery (if (nil? query) "" query)
        route (find
                (fn [route]
                  (and
                    (=
                      (get route :url)
                      (get (get request :uri) :path))
                    (=
                      (get route :method)
                      (get request :method))
                    (=
                      (get route :query) altquery)))
                routes)]
     ((get route :page) request)))

 (defn emit-response [response]
   (let [rsp (http/create-response-from-map response)]
     (http/emit-response rsp)))

 (let [request (http/request-from-globals)
       dsn "mysql:host=localhost;dbname=h37u320_menagerie;charset=UTF8"
       pdo (php/new "\\PDO" dsn "mkloim" "mkloimpwd")]
   (ql/mount {:parsers {:read   parsers-db/read
                        :mutate parsers-db/mutate}
              :pdo pdo})
   (parsers-db/create-tables-if-necessary)
   (emit-response (route-match request routes)))
